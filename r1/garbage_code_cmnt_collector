# One purpose: to store garbage code/comments from other branches, ideas that weren't good enough to keep in the code/README.md file
Lines below were inside the README.md. The function that is stored here was used (you don't remember when), the function you wanted to compare
 it to was also used, but now the way the FFT is implemented now is completely different. What I'm trying to get at, future me: 
 THERE WERE THREE VARIANTS OF THE FFT IMPLEMENTATION (MAYBE EVEN MORE), YOU WANTED TO DO A COMPARISON BETWEEN TWO OF THEM, THEY GOT EDITED OUT
 AND THE THIRD ONE REMAINED AS ACTUAL CODE THAT GETS USED. BEFORE GETTING EDITED OUT, ONE WAS SAVED HERE, THE OTHER ONE COULD ONLY BE RECOVERED FROM THE GIT COMMIT HISTORY 
# FurtherExplanations
## FFT algorithm
<!--
Not good enough, to delete or improve
Understanding the FFT algorithm is easier once concrete examples are considered and not abstract scenarios. As hypothetical, let's consider the following vector of four elements: (a, b, c,d). It's length already is a power of 2, so next step is to reorder it: (a, c, b, d).
First the vector is divided into a series of separate elements as such: ((a), (c), (b), (d)). For each consecutive non-overlapping pair of elements, the next BFS(ButterFly Schema) is applied:
```
    e0 = e0 + e1*pwr_4(4)
    e1 = e0 + e1*pwr_4(4)
```
Where:
- _e0_ is the first element of the constructed pair;
- _e1_ is the second element of the constructed pair;
- _pwr\_4_ is a shorthand notation that symbolizes the 
-->

//Keeps this definition of the function here, maybe later you will try 
//to measure the efficiency of the two variants
// void fft_apply(int nr, int pwr, double *vct, double *rts){
//     double *rtEvn, *rtOdd;
//         
//     int layer, seqLn, pwStp;
//     int elmId, seqId;
//     double *oddOut, *evnOut,
//            oddInp[2], evnInp[2],
//            temp[2];
//     int oddId, evnId;
//
//     for(layer=0, seqLn=1, pwStp=nr/2;
//         layer < pwr;
//         layer++, seqLn*=2, pwStp/=2)
//             for(seqId=0; seqId < nr/seqLn; seqId+=2)
//                 for(elmId=0; elmId < seqLn; elmId++){
//                     
//                     evnId = seqId*seqLn+elmId;
//                     asn(evnInp, vct+2*evnId);
//                     evnOut = vct+2*evnId;
//                     rtEvn = rts+((evnId*pwStp)%nr)*2;
//
//                     oddId = evnId+seqLn;
//                     asn(oddInp, vct+2*oddId);
//                     oddOut = vct+2*oddId;
//                     rtOdd = rts+((oddId*pwStp)%nr)*2;
//
//                     add( evnOut, evnInp,
//                         tms( temp, oddInp, rtEvn)
//                     );
//
//                     add( oddOut, evnInp,
//                         tms( temp, oddInp, rtOdd)
//                     );
//
//                 }
// }

